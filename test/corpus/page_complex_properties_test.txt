================================================================================
Page with complex properties test
================================================================================

#pragma warning disable AS0106
page 30 "Item Card"
#pragma warning restore AS0106
{
    Caption = 'Item Card';
    PageType = Card;
    RefreshOnActivate = true;
    SourceTable = Item;
    AdditionalSearchTerms = 'Product, Finished Good, Component, Raw Material, Assembly Item, Product Details, Merchandise Profile, Item Info, Commodity Info, Product Data, Article Details, Goods Profile, Item Detail';
    AboutTitle = 'About item details';
    AboutText = 'With the **Item Card** you manage the information that appears in sales and purchase documents when you buy or sell an item, such as line description and price. You can also find settings for how an item is priced, replenished, stocked, and for how costing and posting is done.';
    
    layout
    {
        area(content)
        {
            field("No."; Rec."No.")
            {
                ShowMandatory = true;
                HideValue = false;
                CaptionClass = '2,0,' + Rec.FieldCaption("Unit Price");
                DecimalPlaces = 2 : 2;
                AboutTitle = 'About item number';
                AboutText = 'This field contains the unique identifier for the item.';
            }
        }
    }
    
    actions
    {
        area(processing)
        {
            action(TestAction)
            {
                Caption = 'Test Action';
                trigger OnAction()
                begin
                    if AdjustInventory.RunModal() in [ACTION::LookupOK, ACTION::OK] then
                        Message('Success');
                end;
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (pragma)
  (page_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (pragma)
    (caption_property
      (string_literal))
    (page_type_property)
    (refresh_on_activate_property
      value: (boolean))
    (source_table_property
      value: (identifier))
    (additional_search_terms_property
      value: (string_literal))
    (about_title_property
      value: (string_literal))
    (about_text_property
      value: (string_literal))
    (layout_section
      (area_section
        (field_section
          control_id: (quoted_identifier)
          source_or_field_name: (field_access
            record: (identifier)
            field: (quoted_identifier))
          (show_mandatory_property
            value: (boolean))
          (hide_value_property
            value: (boolean))
          (caption_class_property
            value: (additive_expression
              left: (string_literal)
              right: (call_expression
                function: (member_expression
                  object: (identifier)
                  property: (identifier))
                arguments: (argument_list
                  (quoted_identifier)))))
          (decimal_places_property
            precision: (integer)
            scale: (integer))
          (about_title_property
            value: (string_literal))
          (about_text_property
            value: (string_literal)))))
    (actions_section
      (area_action_section
        (action_declaration
          name: (identifier)
          (caption_property
            (string_literal))
          (trigger_declaration
            name: (trigger_name)
            (code_block
              (if_statement
                left: (call_expression
                  function: (member_expression
                    object: (identifier)
                    property: (identifier))
                  arguments: (argument_list))
                operator: (in_operator)
                right: (list_literal
                  (expression_list
                    (qualified_enum_value
                      enum_type: (identifier)
                      value: (identifier))
                    (qualified_enum_value
                      enum_type: (identifier)
                      value: (identifier))))
                then_branch: (call_expression
                  function: (identifier)
                  arguments: (argument_list
                    (string_literal))))))))))))