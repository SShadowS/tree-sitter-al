================================================================================
Key with preprocessor conditional properties
================================================================================

table 50100 TestTable
{
    fields
    {
        field(1; ID; Integer) { }
        field(2; Status; Text[20]) { }
        field(3; "Service Code"; Code[20]) { }
        field(4; "Document Format"; Code[10]) { }
        field(5; "Service Integration"; Integer) { }
    }

    keys
    {
        key(Key1; ID)
        {
            Clustered = true;
        }
        key(Key2; Status, "Service Code", "Document Format", "Service Integration")
        {
            Clustered = false;
            ObsoleteReason = 'Replaced by Key3.';
#if CLEAN26
            ObsoleteState = Removed;
            ObsoleteTag = '29.0';
#else
            ObsoleteState = Pending;
            ObsoleteTag = '26.0';
#endif
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (field_declaration
        id: (integer)
        name: (identifier)
        type: (type_specification
          (text_type
            length: (integer))))
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (code_type
            length: (integer))))
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (code_type
            length: (integer))))
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (basic_type))))
    (keys
      (key_declaration
        name: (name)
        fields: (key_field_list
          (identifier))
        (clustered_property
          value: (boolean)))
      (key_declaration
        name: (name)
        fields: (key_field_list
          (identifier)
          (quoted_identifier)
          (quoted_identifier)
          (quoted_identifier))
        (clustered_property
          value: (boolean))
        (property
          (obsolete_reason_property
            value: (obsolete_reason_value
              (string_literal))))
        (preproc_conditional_key_properties
          (preproc_if
            condition: (identifier))
          (property
            (obsolete_state_property
              value: (obsolete_state_value)))
          (property
            (obsolete_tag_property
              value: (obsolete_tag_value
                (string_literal))))
          (preproc_else)
          (property
            (obsolete_state_property
              value: (obsolete_state_value)))
          (property
            (obsolete_tag_property
              value: (obsolete_tag_value
                (string_literal))))
          (preproc_endif))))))

================================================================================
Key with nested preprocessor conditionals
================================================================================

table 50101 AnotherTable
{
    fields
    {
        field(1; "Entry No."; Integer) { }
    }

    keys
    {
#if not CLEANSCHEMA29
        key(Key1; "Entry No.")
        {
            Clustered = false;
            ObsoleteReason = 'This key is obsolete';
#if CLEAN26
            ObsoleteState = Removed;
#else
            ObsoleteState = Pending;
#endif
            ObsoleteTag = '26.0';
        }
#endif
        key(Key2; "Entry No.")
        {
            Clustered = true;
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (basic_type))))
    (keys
      (preproc_conditional_keys
        (preproc_if
          condition: (preproc_not_expression
            (identifier)))
        (key_declaration
          name: (name)
          fields: (key_field_list
            (quoted_identifier))
          (clustered_property
            value: (boolean))
          (property
            (obsolete_reason_property
              value: (obsolete_reason_value
                (string_literal))))
          (preproc_conditional_key_properties
            (preproc_if
              condition: (identifier))
            (property
              (obsolete_state_property
                value: (obsolete_state_value)))
            (preproc_else)
            (property
              (obsolete_state_property
                value: (obsolete_state_value)))
            (preproc_endif))
          (property
            (obsolete_tag_property
              value: (obsolete_tag_value
                (string_literal)))))
        (preproc_endif))
      (key_declaration
        name: (name)
        fields: (key_field_list
          (quoted_identifier))
        (clustered_property
          value: (boolean))))))