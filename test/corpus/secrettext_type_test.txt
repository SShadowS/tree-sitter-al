================================================================================
SecretText type declaration
================================================================================

codeunit 50100 "Secret Handler"
{
    procedure GetSecret()
    var
        Token: SecretText;
    begin
        Token := GetAuthToken();
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (attributed_procedure
      (procedure
        name: (name
          (identifier))
        (var_section
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type))))
        (code_block
          (assignment_statement
            left: (identifier)
            right: (call_expression
              function: (identifier)
              arguments: (argument_list))))))))

================================================================================
SecretText case variations
================================================================================

codeunit 50200 "Token Manager"
{
    var
        MySecret: secrettext;
        AnotherSecret: SECRETTEXT;
        ThirdSecret: SecretText;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (var_section
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type))))))

================================================================================
SecretText with methods
================================================================================

codeunit 50300 "Auth Handler"
{
    procedure ProcessToken(Token: SecretText): Boolean
    var
        IsValid: Boolean;
    begin
        if Token.IsEmpty() then
            exit(false);
        
        IsValid := ValidateToken(Token);
        exit(IsValid);
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (attributed_procedure
      (procedure
        name: (name
          (identifier))
        (parameter_list
          (parameter
            parameter_name: (name
              (identifier))
            parameter_type: (type_specification
              (basic_type))))
        return_type: (return_type
          (type_specification
            (basic_type)))
        (var_section
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type))))
        (code_block
          (if_statement
            condition: (call_expression
              function: (member_expression
                object: (identifier)
                property: (identifier))
              arguments: (argument_list))
            then_branch: (exit_statement
              return_value: (boolean)))
          (assignment_statement
            left: (identifier)
            right: (call_expression
              function: (identifier)
              arguments: (argument_list
                (identifier))))
          (exit_statement
            return_value: (identifier)))))))
