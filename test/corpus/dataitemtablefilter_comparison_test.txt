================================================================================
DataItemTableFilter with comparison operators
================================================================================

query 50000 "Sales Lines Outstanding"
{
    elements
    {
        dataitem(salesLines; "Sales Line")
        {
            DataItemTableFilter = Type = const(Item), "Outstanding Qty. (Base)" = filter(> 0), "Document Type" = filter(Order | "Return Order");
            column(documentNo; "Document No.")
            {
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (query_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (elements_section
      (dataitem_section
        name: (identifier)
        table_name: (quoted_identifier)
        (data_item_table_filter_property
          field: (identifier)
          filter: (const_expression
            (identifier))
          field: (quoted_identifier)
          filter: (integer)
          field: (quoted_identifier)
          filter: (identifier)
          filter: (quoted_identifier))
        (column_section
          name: (identifier)
          field_name: (quoted_identifier))))))

================================================================================
DataItemTableFilter with various comparison operators
================================================================================

report 50001 "Test Report"
{
    dataset
    {
        dataitem(Item; Item)
        {
            DataItemTableFilter = Quantity = filter(>= 10), "Unit Price" = filter(< 100), "Inventory Value" = filter(<> 0);
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (report_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (dataset_section
      (report_dataitem_section
        name: (identifier)
        (identifier)
        (data_item_table_filter_property
          value: (table_filter_value
            field: (identifier)
            filter: (filter_expression
              (integer))
            field: (quoted_identifier)
            filter: (filter_expression
              (integer))
            field: (quoted_identifier)
            filter: (filter_expression
              (integer))))))))
