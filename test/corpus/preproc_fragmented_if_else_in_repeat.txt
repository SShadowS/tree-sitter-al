================================================================================
Preprocessor fragmented if-else inside repeat-until loop
================================================================================

codeunit 50000 "Test"
{
    procedure Test()
    var
        Buffer: Record "Test" temporary;
        Mgt: Codeunit "Mgt";
    begin
#if not CLEAN24
        if not Mgt.IsEnabled() then begin
            Buffer.Reset();
            if Buffer.Find('-') then
                repeat
                    Buffer.Quantity := Buffer.RecordedQty - Buffer.ExpectedQty;
                    Buffer.Modify();
                until Buffer.Next() = 0;
        end else begin
#endif
            Buffer.Reset();
            if Buffer.Find('-') then
                repeat
                    Buffer.Quantity := Buffer.RecordedQty - Buffer.ExpectedQty;
                    Buffer.Modify();
                until Buffer.Next() = 0;
#if not CLEAN24
        end;
#endif
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (procedure
      name: (name
        (identifier))
      (var_section
        (variable_declaration
          name: (identifier)
          type: (type_specification
            (record_type
              reference: (quoted_identifier)))
          temporary: (temporary))
        (variable_declaration
          name: (identifier)
          type: (type_specification
            (codeunit_type
              reference: (quoted_identifier)))))
      (code_block
        (preproc_conditional_statements
          (preproc_if
            condition: (preproc_not_expression
              (identifier)))
          (if_statement
            (preproc_fragmented_if_else
              condition: (unary_expression
                operator: (unary_operator)
                operand: (call_expression
                  function: (member_expression
                    object: (identifier)
                    property: (identifier))
                  arguments: (argument_list)))
              then_branch: (code_block
                (call_expression
                  function: (member_expression
                    object: (identifier)
                    property: (identifier))
                  arguments: (argument_list))
                (if_statement
                  condition: (call_expression
                    function: (member_expression
                      object: (identifier)
                      property: (identifier))
                    arguments: (argument_list
                      (string_literal)))
                  then_branch: (repeat_statement
                    body: (code_block
                      (assignment_expression
                        left: (member_expression
                          object: (identifier)
                          property: (identifier))
                        right: (subtraction_expression
                          left: (member_expression
                            object: (identifier)
                            property: (identifier))
                          right: (member_expression
                            object: (identifier)
                            property: (identifier))))
                      (call_expression
                        function: (member_expression
                          object: (identifier)
                          property: (identifier))
                        arguments: (argument_list)))
                    condition: (comparison_expression
                      left: (call_expression
                        function: (member_expression
                          object: (identifier)
                          property: (identifier))
                        arguments: (argument_list))
                      operator: (comparison_operator)
                      right: (integer)))))
              (preproc_endif)
              (call_expression
                function: (member_expression
                  object: (identifier)
                  property: (identifier))
                arguments: (argument_list))
              (if_statement
                condition: (call_expression
                  function: (member_expression
                    object: (identifier)
                    property: (identifier))
                  arguments: (argument_list
                    (string_literal)))
                then_branch: (repeat_statement
                  body: (code_block
                    (assignment_expression
                      left: (member_expression
                        object: (identifier)
                        property: (identifier))
                      right: (subtraction_expression
                        left: (member_expression
                          object: (identifier)
                          property: (identifier))
                        right: (member_expression
                          object: (identifier)
                          property: (identifier))))
                    (call_expression
                      function: (member_expression
                        object: (identifier)
                        property: (identifier))
                      arguments: (argument_list)))
                  condition: (comparison_expression
                    left: (call_expression
                      function: (member_expression
                        object: (identifier)
                        property: (identifier))
                      arguments: (argument_list))
                    operator: (comparison_operator)
                    right: (integer))))
              (preproc_if
                condition: (preproc_not_expression
                  (identifier)))
              (preproc_endif)))
          (preproc_endif)))))