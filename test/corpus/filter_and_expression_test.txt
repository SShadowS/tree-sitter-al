================================================================================
Filter with AND expression - two not equal conditions
================================================================================

table 50100 "Test Filter And"
{
    fields
    {
        field(1; "User Name"; Code[50])
        {
            TableRelation = User."User Name" where("License Type" = filter(<> "External User" & <> "Application"));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (code_type
            length: (integer)))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (quoted_identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (filter_condition
                      field: (field_ref
                        (quoted_identifier))
                      filter: (filter_expression_function
                        value: (filter_and_expression
                          (filter_not_equal_expression
                            value: (quoted_identifier))
                          (filter_not_equal_expression
                            value: (quoted_identifier)))))))))))
        (empty_statement)))))

================================================================================
Filter with AND expression - three conditions
================================================================================

table 50101 "Test Multiple And"
{
    fields
    {
        field(1; "User Name"; Code[50])
        {
            TableRelation = User."User Name" where("License Type" = filter(<> "External User" & <> "Application" & <> "AAD Group"));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (code_type
            length: (integer)))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (quoted_identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (filter_condition
                      field: (field_ref
                        (quoted_identifier))
                      filter: (filter_expression_function
                        value: (filter_and_expression
                          (filter_not_equal_expression
                            value: (quoted_identifier))
                          (filter_not_equal_expression
                            value: (quoted_identifier))
                          (filter_not_equal_expression
                            value: (quoted_identifier)))))))))))
        (empty_statement)))))

================================================================================
Filter with AND expression - mixed operators
================================================================================

table 50102 "Test Mixed And"
{
    fields
    {
        field(1; "Amount"; Decimal)
        {
            TableRelation = Item."No." where(Quantity = filter(> 0 & <= 100));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (basic_type))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (quoted_identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (filter_condition
                      field: (field_ref
                        (identifier))
                      filter: (filter_expression_function
                        value: (filter_and_expression
                          (filter_greater_than_expression
                            value: (integer))
                          (filter_less_than_or_equal_expression
                            value: (integer)))))))))))
        (empty_statement)))))

================================================================================
Filter with AND expression - with identifiers
================================================================================

table 50103 "Test And Identifiers"
{
    fields
    {
        field(1; "Type"; Code[20])
        {
            TableRelation = Item.Type where(Status = filter(<> Blocked & <> Obsolete));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (code_type
            length: (integer)))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (filter_condition
                      field: (field_ref
                        (identifier))
                      filter: (filter_expression_function
                        value: (filter_and_expression
                          (filter_not_equal_expression
                            value: (identifier))
                          (filter_not_equal_expression
                            value: (identifier)))))))))))
        (empty_statement)))))

================================================================================
Filter with AND expression - range and comparison
================================================================================

table 50104 "Test Complex And"
{
    fields
    {
        field(1; "Date"; Date)
        {
            TableRelation = Calendar.Date where(Year = filter(2020..2025 & <> 2023));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (basic_type))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (filter_condition
                      field: (field_ref
                        (identifier))
                      filter: (filter_expression_function
                        value: (filter_and_expression
                          (filter_range_expression
                            start: (integer)
                            end: (integer))
                          (filter_not_equal_expression
                            value: (integer)))))))))))
        (empty_statement)))))
