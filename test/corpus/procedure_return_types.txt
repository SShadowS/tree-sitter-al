==================
Procedure Return Types
==================

codeunit 50100 "Return Types Test"
{
    procedure GetInteger(): Integer
    begin
        exit(42);
    end;

    procedure GetNamedInteger() Result: Integer
    begin
        Result := 42;
        exit(Result);
    end;

    procedure GetCustomerRecord(): Record Customer
    begin
        exit(Customer);
    end;

    procedure GetNamedCustomerRecord() CustomerRec: Record Customer
    begin
        CustomerRec := Customer;
        exit(CustomerRec);
    end;

    procedure DoSomething()
    begin
        Message('No return value');
    end;
}

---

(source_file
  (codeunit_declaration
    (integer)
    (quoted_identifier)
    (attributed_procedure
      (procedure
        (name
          (identifier))
        (return_type
          (type_specification
            (basic_type)))
        (code_block
          (exit_statement
            (integer)))))
    (attributed_procedure
      (procedure
        (name
          (identifier))
        (return_value
          (identifier))
        (return_type
          (type_specification
            (basic_type)))
        (code_block
          (assignment_expression
            (identifier)
            (integer))
          (exit_statement
            (identifier)))))
    (attributed_procedure
      (procedure
        (name
          (identifier))
        (return_type
          (type_specification
            (record_type
              (identifier))))
        (code_block
          (exit_statement
            (identifier)))))
    (attributed_procedure
      (procedure
        (name
          (identifier))
        (return_value
          (identifier))
        (return_type
          (type_specification
            (record_type
              (identifier))))
        (code_block
          (assignment_expression
            (identifier)
            (identifier))
          (exit_statement
            (identifier)))))
    (attributed_procedure
      (procedure
        (name
          (identifier))
        (code_block
          (call_expression
            (identifier)
            (argument_list
              (string_literal))))))))
