================================================================================
CASE TRUE OF with IN expressions and array indexing
================================================================================

codeunit 123 "Character Validation Test"
{
    procedure ValidatePasswordComplexity()
    var
        Text: Text;
        i: Integer;
        ContainsCapitalLetters: Boolean;
        ContainsLowercaseLetters: Boolean;
        ContainsDigits: Boolean;
    begin
        FOR i := 1 TO STRLEN(Text) DO BEGIN
            CASE TRUE OF
                Text[i] IN ['A' .. 'Z']:
                    ContainsCapitalLetters := TRUE;
                Text[i] IN ['a' .. 'z']:
                    ContainsLowercaseLetters := TRUE;
                Text[i] IN ['0' .. '9']:
                    ContainsDigits := TRUE;
                ELSE BEGIN
                    // Special character
                END
            END;
        END;
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (attributed_procedure
      (procedure
        name: (name
          (identifier))
        (var_section
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (text_type)))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type)))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type)))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type)))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type))))
        (code_block
          (for_statement
            variable: (identifier)
            start: (integer)
            direction: (to)
            end: (call_expression
              function: (identifier)
              arguments: (argument_list
                (identifier)))
            body: (code_block
              (case_statement
                expression: (boolean)
                (case_branch
                  left: (subscript_expression
                    array: (identifier)
                    indices: (expression_list
                      (identifier)))
                  operator: (in_operator)
                  right: (list_literal
                    (expression_list
                      (range_expression
                        left: (string_literal)
                        right: (string_literal))))
                  statements: (assignment_expression
                    left: (identifier)
                    right: (boolean)))
                (case_branch
                  left: (subscript_expression
                    array: (identifier)
                    indices: (expression_list
                      (identifier)))
                  operator: (in_operator)
                  right: (list_literal
                    (expression_list
                      (range_expression
                        left: (string_literal)
                        right: (string_literal))))
                  statements: (assignment_expression
                    left: (identifier)
                    right: (boolean)))
                (case_branch
                  left: (subscript_expression
                    array: (identifier)
                    indices: (expression_list
                      (identifier)))
                  operator: (in_operator)
                  right: (list_literal
                    (expression_list
                      (range_expression
                        left: (string_literal)
                        right: (string_literal))))
                  statements: (assignment_expression
                    left: (identifier)
                    right: (boolean)))
                (else_branch
                  statements: (code_block
                    (comment)))))))))))
