================================================================================
Preprocessor directives within statement blocks
================================================================================

codeunit 50100 TestUnit
{
    procedure TestPreprocessorStatements()
    var
        AllocationAccount: Record "Allocation Account";
    begin
        case true of
            true:
                begin
#if BC24
                    AllocationAccount.SetRange("Account Type", AllocationAccount."Account Type"::Fixed);
#endif
                    if PAGE.RunModal(0, AllocationAccount) = ACTION::LookupOK then
                        message("Success");
                end;
        end;
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (identifier)
    (procedure
      name: (name)
      (var_section
        (variable_declaration
          name: (identifier)
          type: (type_specification
            (record_type
              reference: (quoted_identifier)))))
      (code_block
        (case_statement
          expression: (boolean)
          (case_branch
            pattern: (boolean)
            statements: (code_block
              (preproc_conditional_statements
                (preproc_if
                  condition: (identifier))
                (call_expression
                  function: (member_expression
                    object: (identifier)
                    property: (identifier))
                  arguments: (argument_list
                    (quoted_identifier)
                    (qualified_enum_value
                      enum_type: (field_access
                        record: (identifier)
                        field: (quoted_identifier))
                      value: (identifier))))
                (preproc_endif))
              (if_statement
                condition: (comparison_expression
                  left: (call_expression
                    function: (member_expression
                      object: (identifier)
                      property: (identifier))
                    arguments: (argument_list
                      (integer)
                      (identifier)))
                  operator: (comparison_operator)
                  right: (qualified_enum_value
                    enum_type: (identifier)
                    value: (identifier)))
                then_branch: (call_expression
                  function: (identifier)
                  arguments: (argument_list
                    (quoted_identifier)))))))))))
