================================================================================
Namespace qualified record types in variable declarations
================================================================================

codeunit 123 "Test Codeunit"
{
    local procedure TestNamespaceRecords()
    var
        UOM: Record Microsoft.Foundation.UOM."Unit of Measure";
        Currency: Record Microsoft.Finance.Currency.Currency;
        Customer: Record Microsoft.Sales.Customer.Customer;
    begin
        UOM.SetRange("International Standard Code", 'kg');
        if UOM.FindFirst() then
            Currency.Code := UOM.Code;
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (attributed_procedure
      (procedure
        modifier: (procedure_modifier)
        name: (name)
        (var_section
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (record_type
                reference: (qualified_table_reference
                  namespace: (identifier)
                  part: (identifier)
                  part: (identifier)
                  part: (quoted_identifier)))))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (record_type
                reference: (qualified_table_reference
                  namespace: (identifier)
                  part: (identifier)
                  part: (identifier)
                  part: (identifier)))))
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (record_type
                reference: (qualified_table_reference
                  namespace: (identifier)
                  part: (identifier)
                  part: (identifier)
                  part: (identifier))))))
        (code_block
          (call_expression
            function: (member_expression
              object: (identifier)
              property: (identifier))
            arguments: (argument_list
              (quoted_identifier)
              (string_literal)))
          (if_statement
            condition: (call_expression
              function: (member_expression
                object: (identifier)
                property: (identifier))
              arguments: (argument_list))
            then_branch: (assignment_statement
              left: (member_expression
                object: (identifier)
                property: (identifier))
              right: (member_expression
                object: (identifier)
                property: (identifier)))))))))
