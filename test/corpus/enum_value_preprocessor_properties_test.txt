================================================================================
Enum Value with Preprocessor Conditional Properties
================================================================================

namespace System.Security.Encryption;

#if not CLEAN24
#pragma warning disable AL0432
enum 1446 SignatureAlgorithm implements SignatureAlgorithm, "Signature Algorithm v2"
#pragma warning restore AL0432
#else
enum 1446 SignatureAlgorithm implements "Signature Algorithm v2"
#endif
{
    Extensible = false;

    value(0; RSA)
    {
#if not CLEAN24
        Implementation = SignatureAlgorithm = "RSACryptoServiceProvider Impl.",
                            "Signature Algorithm v2" = "RSACryptoServiceProvider Impl.";
#else
        Implementation = "Signature Algorithm v2" = "RSACryptoServiceProvider Impl.";
#endif
    }

    value(1; DSA)
    {
#if not CLEAN24
        Implementation = SignatureAlgorithm = "DSACryptoServiceProvider Impl.",
                            "Signature Algorithm v2" = "DSACryptoServiceProvider Impl.";
#else
        Implementation = "Signature Algorithm v2" = "DSACryptoServiceProvider Impl.";
#endif
    }
}

--------------------------------------------------------------------------------

(source_file
  (namespace_declaration
    name: (namespace_name
      (identifier)
      (identifier)
      (identifier)))
  (preproc_conditional_enum_declaration
    (preproc_if
      condition: (identifier))
    (pragma)
    object_id: (integer)
    object_name: (identifier)
    consequence: (implements_clause
      interface: (identifier)
      interface: (quoted_identifier))
    (pragma)
    (preproc_else)
    object_id: (integer)
    object_name: (identifier)
    alternative: (implements_clause
      interface: (quoted_identifier))
    (preproc_endif)
    (extensible_property
      value: (extensible_value
        (boolean)))
    (enum_value_declaration
      value_id: (integer)
      value_name: (identifier)
      (preproc_conditional_enum_properties
        (preproc_if
          condition: (identifier))
        (implementation_property
          value: (implementation_value_list
            (implementation_value
              interface: (identifier)
              implementation: (quoted_identifier))
            (implementation_value
              interface: (quoted_identifier)
              implementation: (quoted_identifier))))
        (preproc_else)
        (implementation_property
          value: (implementation_value_list
            (implementation_value
              interface: (quoted_identifier)
              implementation: (quoted_identifier))))
        (preproc_endif)))
    (enum_value_declaration
      value_id: (integer)
      value_name: (identifier)
      (preproc_conditional_enum_properties
        (preproc_if
          condition: (identifier))
        (implementation_property
          value: (implementation_value_list
            (implementation_value
              interface: (identifier)
              implementation: (quoted_identifier))
            (implementation_value
              interface: (quoted_identifier)
              implementation: (quoted_identifier))))
        (preproc_else)
        (implementation_property
          value: (implementation_value_list
            (implementation_value
              interface: (quoted_identifier)
              implementation: (quoted_identifier))))
        (preproc_endif)))))

================================================================================
Enum Value with Comments Between Values
================================================================================

enum 50000 TestEnum
{
    value(0; First)
    {
        Caption = 'First Value';
    }
    
    /// <summary>
    /// This is a second value
    /// </summary>
    value(1; Second)
    {
        Caption = 'Second Value';
    }
}

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    object_id: (integer)
    object_name: (identifier)
    (enum_value_declaration
      value_id: (integer)
      value_name: (identifier)
      (caption_property
        (string_literal)))
    (comment)
    (comment)
    (comment)
    (enum_value_declaration
      value_id: (integer)
      value_name: (identifier)
      (caption_property
        (string_literal)))))
