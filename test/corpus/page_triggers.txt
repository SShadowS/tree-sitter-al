==================
Page-level triggers
==================

page 50000 "Test Page Triggers"
{
    PageType = Card;
    SourceTable = Customer;
    
    layout
    {
        area(Content)
        {
            group(GroupName)
            {
                field(Name; Rec.Name)
                {
                    ApplicationArea = All;
                }
            }
        }
    }
    
    // Basic page triggers that were already supported
    trigger OnInit()
    begin
        IsInitialized := true;
    end;
    
    trigger OnOpenPage()
    begin
        Message('Page opened');
    end;
    
    trigger OnClosePage()
    begin
        Message('Page closed');
    end;
    
    trigger OnAfterGetRecord()
    begin
        CalcFields("No. of Orders");
    end;
    
    // New page triggers added in the fix
    trigger OnAfterGetCurrRecord()
    begin
        CurrRecordID := Rec.RecordId;
    end;
    
    trigger OnNewRecord()
    begin
        Rec.Type := Rec.Type::Customer;
    end;
    
    trigger OnInsertRecord()
    begin
        InsertedCount += 1;
        exit(true);
    end;
    
    trigger OnModifyRecord()
    begin
        ModifiedCount += 1;
        exit(true);
    end;
    
    trigger OnDeleteRecord()
    begin
        if not ConfirmDelete then
            exit(false);
        exit(true);
    end;
    
    trigger OnQueryClosePage()
    begin
        if Rec.Modified then
            exit(Confirm('Discard changes?'));
        exit(true);
    end;

    var
        IsInitialized: Boolean;
        CurrRecordID: RecordID;
        InsertedCount: Integer;
        ModifiedCount: Integer;
        ConfirmDelete: Boolean;
}

---

(source_file
  (page_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (page_type_property)
    (source_table_property
      value: (identifier))
    (layout_section
      (area_section
        (group_section
          name: (identifier)
          (field_section
            control_id: (identifier)
            source_or_field_name: (member_expression
              object: (identifier)
              property: (identifier))
            (application_area_property
              value: (identifier))))))
    (comment)
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_statement
          left: (identifier)
          right: (boolean))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (call_expression
          function: (identifier)
          arguments: (argument_list
            (string_literal)))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (call_expression
          function: (identifier)
          arguments: (argument_list
            (string_literal)))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (call_expression
          function: (identifier)
          arguments: (argument_list
            (quoted_identifier)))))
    (comment)
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_statement
          left: (identifier)
          right: (member_expression
            object: (identifier)
            property: (identifier)))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_statement
          left: (member_expression
            object: (identifier)
            property: (identifier))
          right: (qualified_enum_value
            enum_type: (member_expression
              object: (identifier)
              property: (identifier))
            value: (identifier)))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_statement
          left: (identifier)
          right: (integer))
        (exit_statement
          return_value: (boolean))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_statement
          left: (identifier)
          right: (integer))
        (exit_statement
          return_value: (boolean))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (if_statement
          condition: (unary_expression
            (identifier))
          then_branch: (exit_statement
            return_value: (boolean)))
        (exit_statement
          return_value: (boolean))))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (if_statement
          condition: (member_expression
            object: (identifier)
            property: (identifier))
          then_branch: (exit_statement
            return_value: (call_expression
              function: (identifier)
              arguments: (argument_list
                (string_literal)))))
        (exit_statement
          return_value: (boolean))))
    (var_section
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (identifier)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type))))))