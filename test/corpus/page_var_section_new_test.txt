================================================================================
Page with var section and variable declarations
================================================================================

page 50100 "Test Page"
{
    PageType = Card;
    
    trigger OnOpenPage()
    begin
        Message('Test');
    end;
    
    var
        StyleExpr: Text;
        IsTableLine: Boolean;
        IsFieldEditable: Boolean;
}

--------------------------------------------------------------------------------

(source_file
  (page_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (page_type_property)
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (call_expression
          function: (identifier)
          arguments: (argument_list
            (string_literal)))))
    (var_section
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (text_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type))))))

================================================================================
Page with var section after procedures
================================================================================

page 703 "Merge Duplicate Subform"
{
    Caption = 'Merge Duplicate Subform';
    
    trigger OnAfterGetRecord()
    begin
        IsTableLine := Rec.Type = Rec.Type::Table;
        SetStyle();
    end;
    
    var
        StyleExpr: Text;
        IsTableLine: Boolean;
        IsFieldEditable: Boolean;
        IsOverrideEnabled: Boolean;
    
    procedure Set(var TempBuffer: Record "Buffer" temporary)
    begin
        Rec.Copy(TempBuffer, true);
    end;
    
    local procedure SetStyle()
    begin
        if IsTableLine then
            StyleExpr := 'Strong'
        else
            StyleExpr := 'Standard';
    end;
}

--------------------------------------------------------------------------------

(source_file
  (page_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (caption_property
      (string_literal))
    (trigger_declaration
      name: (trigger_name)
      (code_block
        (assignment_expression
          left: (identifier)
          right: (comparison_expression
            left: (member_expression
              object: (identifier)
              property: (identifier))
            operator: (comparison_operator)
            right: (qualified_enum_value
              enum_type: (member_expression
                object: (identifier)
                property: (identifier))
              value: (identifier))))
        (call_expression
          function: (identifier)
          arguments: (argument_list))))
    (var_section
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (text_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type)))
      (variable_declaration
        name: (identifier)
        type: (type_specification
          (basic_type))))
    (procedure
      name: (name
        (identifier))
      (parameter_list
        (parameter
          modifier: (modifier)
          parameter_name: (name
            (identifier))
          parameter_type: (type_specification
            (record_type
              reference: (quoted_identifier)))
          temporary: (temporary)))
      (code_block
        (call_expression
          function: (member_expression
            object: (identifier)
            property: (identifier))
          arguments: (argument_list
            (identifier)
            (boolean)))))
    (procedure
      modifier: (procedure_modifier)
      name: (name
        (identifier))
      (code_block
        (if_statement
          condition: (identifier)
          then_branch: (assignment_expression
            left: (identifier)
            right: (string_literal))
          else_branch: (assignment_expression
            left: (identifier)
            right: (string_literal)))))))
