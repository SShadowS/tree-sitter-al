==================
 Simple Table Test
==================

table 50100 "My Test Table"
{
    Caption = 'My Test Table';
    DataClassification = CustomerContent;
    DataCaptionFields = "Primary Key", Description;
    DrillDownPageId = "My Test Table List";
    LookupPageId = "My Test Table Lookup";
    PasteIsValid = true;
    Permissions = tabledata "My Test Table" = rimd;
    DataPerCompany = true;
    Extensible = true;
    TableType = Normal;
    CompressionType = Page;
    Access = Public;
    ObsoleteState = Pending;
    ObsoleteReason = 'This table will be replaced in the next version.';
    ObsoleteTag = '19.0';
    ReplicateData = true;
    LinkedObject = false;
    LinkedInTransaction = false;
    CaptionML = ENU = 'My Test Table', DAN = 'Min Test Tabel';
    AboutTitle = 'About My Test Table';
    AboutText = 'This table is used for testing purposes.';

    fields
    {
        field(1; "Primary Key"; Code[20])
        {
            Caption = 'Primary Key';
            DataClassification = CustomerContent;
        }
        field(2; Description; Text[100])
        {
            Caption = 'Description';
        }
        field(3; Amount; Decimal)
        {
            Caption = 'Amount';
            DecimalPlaces = 2:2;
        }
    }

    keys
    {
        key(PK; "Primary Key")
        {
            Clustered = true;
        }
    }

    fieldgroups
    {
        fieldgroup(DropDown; "Primary Key", Description) { }
        fieldgroup(Brick; "Primary Key", Description, Amount) { }
    }

    var
        myInt: Integer;

    trigger OnInsert()
    begin
        Message('Record inserted');
    end;

    trigger OnModify()
    begin
        Message('Record modified');
    end;

    trigger OnDelete()
    begin
        Message('Record deleted');
    end;

    trigger OnRename()
    begin
        Message('Record renamed');
    end;

    procedure MyProcedure(param: Text): Boolean
    begin
        if param <> '' then
            exit(true)
        else
            exit(false);
    end;
}

---

(source_file
  (table_object
    (integer)
    (string)
    (caption_property
      (string_literal))
    (data_classification_property
      (identifier))
    (data_caption_fields_property
      (identifier_list
        (identifier)
        (identifier)))
    (drill_down_page_id_property
      (string_literal))
    (lookup_page_id_property
      (string_literal))
    (paste_is_valid_property
      (boolean_literal))
    (permissions_property
      (permissions_value
        (integer)
        (permissions_string)))
    (data_per_company_property
      (boolean_literal))
    (extensible_property
      (boolean_literal))
    (table_type_property
      (identifier))
    (compression_type_property
      (identifier))
    (access_property
      (identifier))
    (obsolete_state_property
      (identifier))
    (obsolete_reason_property
      (string_literal))
    (obsolete_tag_property
      (string_literal))
    (replicate_data_property
      (boolean_literal))
    (linked_object_property
      (boolean_literal))
    (linked_in_transaction_property
      (boolean_literal))
    (caption_ml_property
      (multilanguage_string_literal
        (identifier)
        (string_literal)
        (identifier)
        (string_literal)))
    (about_title_property
      (string_literal))
    (about_text_property
      (string_literal))
    (fields
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal))
        (data_classification_property
          (identifier)))
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal)))
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal))
        (decimal_places_property
          (decimal_places_value
            (integer)
            (integer)))))
    (keys
      (key
        (identifier)
        (key_field_list
          (key_field))
        (clustered_property
          (boolean_literal))))
    (fieldgroups
      (fieldgroup
        (identifier)
        (identifier_list
          (identifier)
          (identifier)))
      (fieldgroup
        (identifier)
        (identifier_list
          (identifier)
          (identifier)
          (identifier))))
    (var
      (variable_declaration
        (identifier)
        (identifier)))
    (oninsert_trigger
      (code_block
        (procedure_call_statement
          (identifier)
          (string_literal))))
    (onmodify_trigger
      (code_block
        (procedure_call_statement
          (identifier)
          (string_literal))))
    (ondelete_trigger
      (code_block
        (procedure_call_statement
          (identifier)
          (string_literal))))
    (onrename_trigger
      (code_block
        (procedure_call_statement
          (identifier)
          (string_literal))))
    (procedure
      (identifier)
      (parameter
        (identifier)
        (identifier))
      (identifier)
      (code_block
        (if_statement
          (binary_expression
            (identifier)
            (comparison_operator)
            (string_literal))
          (code_block
            (exit_statement
              (boolean_literal)))
          (code_block
            (exit_statement
              (boolean_literal))))))))
