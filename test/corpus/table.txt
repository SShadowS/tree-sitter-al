==================
 Simple Table Test
==================

table 50100 "My Test Table"
{
    Caption = 'My Test Table';
    DataClassification = CustomerContent;

    fields
    {
        field(1; "Primary Key"; Code[20])
        {
            Caption = 'Primary Key';
            DataClassification = CustomerContent;
        }
        field(2; Description; Text[100])
        {
            Caption = 'Description';
        }
        field(3; Amount; Decimal)
        {
            Caption = 'Amount';
            DecimalPlaces = 2:2;
        }
    }

    keys
    {
        key(PK; "Primary Key")
        {
            Clustered = true;
        }
    }

    var
        myInt: Integer;

    trigger OnInsert()
    begin
        Message('Record inserted');
    end;

    procedure MyProcedure(param: Text): Boolean
    begin
        if param <> '' then
            exit(true)
        else
            exit(false);
    end;
}

---

(source_file
  (table_object
    (integer)
    (string)
    (caption_property
      (string_literal))
    (data_classification_property
      (identifier))
    (fields
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal))
        (data_classification_property
          (identifier)))
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal)))
      (field
        (integer)
        (string)
        (identifier)
        (caption_property
          (string_literal))
        (decimal_places_property
          (decimal_places_value
            (integer)
            (integer)))))
    (keys
      (key
        (identifier)
        (key_field_list
          (key_field))
        (clustered_property
          (boolean_literal))))
    (var
      (variable_declaration
        (identifier)
        (identifier)))
    (oninsert_trigger
      (code_block
        (procedure_call_statement
          (identifier)
          (string_literal))))
    (procedure
      (identifier)
      (parameter
        (identifier)
        (identifier))
      (identifier)
      (code_block
        (if_statement
          (binary_expression
            (identifier)
            (comparison_operator)
            (string_literal))
          (code_block
            (exit_statement
              (boolean_literal)))
          (code_block
            (exit_statement
              (boolean_literal))))))))
