================================================================================
Enum with mixed preprocessor content (properties and values together)
================================================================================

#if not CLEANSCHEMA29
namespace Microsoft.eServices.EDocument;

#if CLEAN26
enum 6143 "E-Document Integration"
#else
enum 6143 "E-Document Integration" implements "E-Document Integration"
#endif
{
#if not CLEAN26
    ObsoleteTag = '26.0';
    ObsoleteState = Pending;
    ObsoleteReason = 'Use sender, receiver and action integration enums instead';

    Extensible = true;
    Access = Public;


    value(0; "No Integration")
    {
        ObsoleteReason = 'Use sender, receiver and action integration enums instead';
        ObsoleteState = Pending;
        ObsoleteTag = '26.0';
        Implementation = "E-Document Integration" = "E-Document No Integration";
    }
#endif
}
#endif

--------------------------------------------------------------------------------

(source_file
  (preprocessor_file_conditional
    condition: (preproc_if
      condition: (preproc_not_expression
        (identifier)))
    consequence: (namespace_declaration
      name: (namespace_name
        (identifier)
        (identifier)
        (identifier)))
    consequence: (preproc_conditional_enum_declaration
      (preproc_if
        condition: (identifier))
      object_id: (integer)
      object_name: (quoted_identifier)
      (preproc_else)
      object_id: (integer)
      object_name: (quoted_identifier)
      alternative: (implements_clause
        interface: (quoted_identifier))
      (preproc_endif)
      (preproc_conditional_enum_content
        (preproc_if
          condition: (preproc_not_expression
            (identifier)))
        (obsolete_tag_property
          value: (obsolete_tag_value
            (string_literal)))
        (obsolete_state_property
          value: (obsolete_state_value))
        (obsolete_reason_property
          value: (obsolete_reason_value
            (string_literal)))
        (extensible_property
          value: (extensible_value
            (boolean)))
        (access_property
          value: (value))
        (enum_value_declaration
          value_id: (integer)
          value_name: (quoted_identifier)
          (obsolete_reason_property
            value: (obsolete_reason_value
              (string_literal)))
          (obsolete_state_property
            value: (obsolete_state_value))
          (obsolete_tag_property
            value: (obsolete_tag_value
              (string_literal)))
          (implementation_property
            value: (implementation_value_list
              (implementation_value
                interface: (quoted_identifier)
                implementation: (quoted_identifier)))))
        (preproc_endif)))
    (preproc_endif)))

================================================================================
Simple enum with conditional content block
================================================================================

enum 50100 "Test Enum"
{
    Caption = 'Test Enum';
    
#if not CLEAN20
    Extensible = true;
    
    value(0; None)
    {
        Caption = 'None';
    }
    
    value(1; Option1)
    {
        Caption = 'Option 1';
    }
#endif
}

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (caption_property
      (string_literal))
    (preproc_conditional_enum_content
      (preproc_if
        condition: (preproc_not_expression
          (identifier)))
      (extensible_property
        value: (extensible_value
          (boolean)))
      (enum_value_declaration
        value_id: (integer)
        value_name: (identifier)
        (caption_property
          (string_literal)))
      (enum_value_declaration
        value_id: (integer)
        value_name: (identifier)
        (caption_property
          (string_literal)))
      (preproc_endif))))
