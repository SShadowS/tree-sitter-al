================================================================================
Database reference in const filter expressions
================================================================================

table 50000 "Sales Line Test"
{
    fields
    {
        field(2677; "Alloc. Acc. Modified by User"; Boolean)
        {
            Caption = 'Allocation Account Distributions Modified';
            FieldClass = FlowField;
            CalcFormula = exist("Alloc. Acc. Manual Override" where("Parent System Id" = field(SystemId), "Parent Table Id" = const(Database::"Sales Line")));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (quoted_identifier)
        type: (type_specification
          (basic_type))
        (caption_property
          (string_literal))
        (field_class_property
          value: (field_class_value))
        (calc_formula_property
          (exist_formula
            table: (table_reference
              (quoted_identifier))
            (where_clause
              conditions: (where_conditions
                (where_condition
                  (field_filter
                    field: (field_ref
                      (quoted_identifier))
                    value: (field_ref
                      (identifier))))
                (where_condition
                  (const_filter
                    field: (field_ref
                      (quoted_identifier))
                    value: (qualified_enum_value
                      enum_type: (identifier)
                      value: (quoted_identifier))))))))))))

================================================================================
Database reference with unquoted table name
================================================================================

table 50100 "Test Table"
{
    fields
    {
        field(1; ParentTableId; Integer)
        {
            TableRelation = AllObj."Object ID" where("Object Type" = const(Table), "Object ID" = const(Database::Customer));
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (table_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (fields
      (field_declaration
        id: (integer)
        name: (identifier)
        type: (type_specification
          (basic_type))
        (table_relation_property
          relation: (table_relation_expression
            (simple_table_relation
              table: (qualified_table_reference
                namespace: (identifier)
                part: (quoted_identifier))
              (where_clause
                conditions: (where_conditions
                  (where_condition
                    (const_filter
                      field: (field_ref
                        (quoted_identifier))
                      value: (identifier)))
                  (where_condition
                    (const_filter
                      field: (field_ref
                        (quoted_identifier))
                      value: (qualified_enum_value
                        enum_type: (identifier)
                        value: (identifier)))))))))
        (empty_statement)))))

================================================================================
Database reference in various contexts
================================================================================

codeunit 50200 "Database References"
{
    procedure TestDatabaseRefs()
    var
        TableId: Integer;
    begin
        // Direct assignment
        TableId := Database::"Sales Line";
        
        // In case statement
        case TableId of
            Database::Customer:
                Message('Customer table');
            Database::"Sales Line":
                Message('Sales Line table');
        end;
        
        // In if statement
        if TableId = Database::Item then
            Message('Item table');
    end;
}

--------------------------------------------------------------------------------

(source_file
  (codeunit_declaration
    object_id: (integer)
    object_name: (quoted_identifier)
    (attributed_procedure
      (procedure
        name: (name
          (identifier))
        (var_section
          (variable_declaration
            name: (identifier)
            type: (type_specification
              (basic_type))))
        (code_block
          (comment)
          (assignment_expression
            left: (identifier)
            right: (qualified_enum_value
              enum_type: (identifier)
              value: (quoted_identifier)))
          (comment)
          (case_statement
            expression: (identifier)
            (case_branch
              pattern: (qualified_enum_value
                enum_type: (identifier)
                value: (identifier))
              statements: (call_expression
                function: (identifier)
                arguments: (argument_list
                  (string_literal))))
            (case_branch
              pattern: (qualified_enum_value
                enum_type: (identifier)
                value: (quoted_identifier))
              statements: (call_expression
                function: (identifier)
                arguments: (argument_list
                  (string_literal)))))
          (comment)
          (if_statement
            condition: (comparison_expression
              left: (identifier)
              operator: (comparison_operator)
              right: (qualified_enum_value
                enum_type: (identifier)
                value: (identifier)))
            then_branch: (call_expression
              function: (identifier)
              arguments: (argument_list
                (string_literal)))))))))
